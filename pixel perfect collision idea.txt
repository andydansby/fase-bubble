idea:

summing the pixels

let's consider 2 groups of binary numbers

you			object		merged bits
00110000	00000011	00011011

move yourself toward the object
00110000	00000011	00110011	= 	not touching
00011000	00000011	00011011	=	not touching
00001100	00000011	00001111	=	touching just on edge
00000111	00000011	00000111	= 	touching and merge

looking at last case
and vs or vs xor

and = 00000010
or  = 00000111
xor = 00000101

the solution is to AND the bits together

00110000 AND 00000011 = 00000000
00011000 AND 00000011 = 00000000
00001100 AND 00000011 = 00000000
00000110 AND 00000011 = 00000010
00000011 AND 00000011 = 00000011

if the end result of two bitmasks are AND'ed together, and the result is 0, then no collision.

if the end result of two bitmasks are AND'ed together, and the result is larger than 0, the there is a collision.


using masks for collision detection

when two masks touch, add up the sum of both masks, if the sum > 1 then a collision has occured.

circle / ball mask

0000111111110000
0001111111111000
0011111111111100
0111111111111110
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
0111111111111110
0011111111111100
0001111111111000
0000111111110000


two balls colliding

0000111111110000  0000111111110000
0001111111111000  0001111111111000
0011111111111100  0011111111111100
0111111111111110  0111111111111110
1111111111111111  1111111111111111
1111111111111111  1111111111111111
1111111111111111  1111111111111111
1111111111111111  1111111111111111
1111111111111111  1111111111111111
1111111111111111  1111111111111111
1111111111111111  1111111111111111
1111111111111111  1111111111111111
0111111111111110  0111111111111110
0011111111111100  0011111111111100
0001111111111000  0001111111111000
0000111111110000  0000111111110000

0000111111110000 0000111111110000
0001111111111000 0001111111111000
0011111111111100 0011111111111100
0111111111111110 0111111111111110
1111111111111111 1111111111111111
1111111111111111 1111111111111111
1111111111111111 1111111111111111
1111111111111111 1111111111111111
1111111111111111 1111111111111111
1111111111111111 1111111111111111
1111111111111111 1111111111111111
1111111111111111 1111111111111111
0111111111111110 0111111111111110
0011111111111100 0011111111111100
0001111111111000 0001111111111000
0000111111110000 0000111111110000

00001111111100000000111111110000
00011111111110000001111111111000
00111111111111000011111111111100
01111111111111100111111111111110
11111111111111111111111111111111
11111111111111111111111111111111
11111111111111111111111111111111
11111111111111111111111111111111
11111111111111111111111111111111
11111111111111111111111111111111
11111111111111111111111111111111
11111111111111111111111111111111
01111111111111100111111111111110
00111111111111000011111111111100
00011111111110000001111111111000
00001111111100000000111111110000

0000111111110000000111111110000
0001111111111000001111111111000
0011111111111100011111111111100
0111111111111110111111111111110
1111111111111111211111111111111
1111111111111111211111111111111
1111111111111111211111111111111
1111111111111111211111111111111
1111111111111111211111111111111
1111111111111111211111111111111
1111111111111111211111111111111
1111111111111111211111111111111
0111111111111110111111111111110
0011111111111100011111111111100
0001111111111000001111111111000
0000111111110000000111111110000







void maskCollision()
{
	//tiles array is unsigned char
	short decision;
	
	short tmpx, tmpy;
	unsigned char tileType;
	
	char north, south, east, west;
	char northBarrierCheck, southBarrierCheck;
	char eastBarrierCheck, westBarrierCheck;
	
	//player mask
	short player01 = 0000111111110000;// 8 pixels to monitor
	short player02 = 0001111111111000;// 2 pixels to monitor, outer edges
	short player03 = 0011111111111100;// 2 pixels to monitor, outer edges
	short player04 = 0111111111111110;// 2 pixels to monitor, outer edges
	short player05 = 1111111111111111;// 2 pixels to monitor, outer edges
	short player06 = 1111111111111111;// 2 pixels to monitor, outer edges
	short player07 = 1111111111111111;// 2 pixels to monitor, outer edges
	short player08 = 1111111111111111;// 2 pixels to monitor, outer edges
	short player09 = 1111111111111111;// 2 pixels to monitor, outer edges
	short player10 = 1111111111111111;// 2 pixels to monitor, outer edges
	short player11 = 1111111111111111;// 2 pixels to monitor, outer edges
	short player12 = 1111111111111111;// 2 pixels to monitor, outer edges
	short player13 = 0111111111111110;// 2 pixels to monitor, outer edges
	short player14 = 0011111111111100;// 2 pixels to monitor, outer edges
	short player15 = 0001111111111000;// 2 pixels to monitor, outer edges
	short player16 = 0000111111110000;// 8 pixels to monitor
	//44 pixels in all to monitor
	
	
	short PM1, PM2, PM3, PM4, PM5, PM6, PM7, PM8 = 0;
	
	//background mask
	/*
	short background01 = 0000000000000000;
	short background02 = 0000000000000000;
	short background03 = 0000000000000000;
	short background04 = 0000000000000000;
	short background05 = 0000000000000000;
	short background06 = 0000000000000000;
	short background07 = 0000000000000000;
	short background08 = 0000000000000000;
	short background09 = 0000000000000000;
	short background10 = 0000000000000000;
	short background11 = 0000000000000000;
	short background12 = 0000000000000000;
	short background13 = 0000000000000000;
	short background14 = 0000000000000000;
	short background15 = 0000000000000000;
	short background16 = 0000000000000000;
	*/

	
				west = (sprites[0].x >> 4) - 1;
				east = (sprites[0].x >> 4) + 1;
				south  = (sprites[0].y >> 4) + 1;
				north  = (sprites[0].y >> 4) - 1;
				
				//enemy sprites
				tmpx = sprites[0].x;
				tmpy = sprites[0].y;
				tileType = tiles[tmpy * scrw + tmpx];
				
				westBarrierCheck  = tiles[tmpy * scrw + west];
				eastBarrierCheck  = tiles[tmpy * scrw + west];
				northBarrierCheck = tiles[north * scrw + tmpx];
				southBarrierCheck = tiles[south * scrw + tmpx];
			//	if (
				/*
					tmpx= sprites[i].x>>4;
					tmpy= sprites[i].y>>4;
					
						if ( tiles[tmpy*scrw+tmpx]== ? ){
							do stuff
						}*/
				
				printtester3(tmpx, tmpy);
				printtester4(north);//printtester1(tileType);
}



